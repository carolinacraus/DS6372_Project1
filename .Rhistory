car_df$Make == "Lamborghini"|
car_df$Make == "Maserati",1,0))
car_df$Japan_build <- as.double(ifelse(car_df$Make == "Acura"|
car_df$Make == "Honda"|
car_df$Make == "Infiniti"|
car_df$Make == "Lexus"|
car_df$Make == "Mazda"|
car_df$Make == "Suzuki"|
car_df$Make == "Subaru"|
car_df$Make == "Nissan"|
car_df$Make == "Scion"|
car_df$Make == "Mitsubishi"|
car_df$Make == "Toyota",1,0))
car_df$finland_build <- as.double(ifelse(car_df$Make == "Saab",1,0))
car_df$Netherlands_build <- as.double(ifelse(car_df$Make == "Spyker",1,0))
car_df$SKorea_build <- as.double(ifelse(car_df$Make == "Genesis"|
car_df$Make == "Hyundai"|
car_df$Make == "Kia",1,0))
car_df$sweden_build <- as.double(ifelse(car_df$Make == "Volvo",1,0))
car_df$UK_build <- as.double(ifelse(car_df$Make == "Aston Martin"|
car_df$Make == "Bentley"|
car_df$Make == "Land Rover"|
car_df$Make == "Lotus"|
car_df$Make == "McLaren"|
car_df$Make == "Rolls-Royce",1,0))
car_df$US_build <- as.double(ifelse(car_df$Make == "Buick"|
car_df$Make == "Cadillac"|
car_df$Make == "Chevrolet"|
car_df$Make == "GMC"|
car_df$Make == "Chrysler"|
car_df$Make == "Dodge"|
car_df$Make == "Ford"|
car_df$Make == "Hummer"|
car_df$Make == "Tesla"|
car_df$Make == "Plymouth"|
car_df$Make == "Pontiac"|
car_df$Make == "Oldsmobile"|
car_df$Make == "Lincoln",1,0))
car_df <- car_df[,-1]
# removing no-numerical categories so that we can viz correlative relationships
car_data_correlations <- car_df[,-c(4,5,7,14:48)]
car_data_correlations<- lapply(car_data_correlations,as.integer)
car_data_correlations<- as.data.frame(car_data_correlations)
# calling cor function to put into var.
corr_data <- cor(car_data_correlations)
# generate the plot
ggcorrplot(corr_data, outline.color = "black", lab = TRUE, title = 'MSRP Correlation Plot')
# car_df
set.seed(7)
trainIndex<-createDataPartition(car_df$log_MSRP,p=.8,list=F)  #p: proportion of data in train
training <- car_df[trainIndex,]
validate <- car_df[-trainIndex,]
# backup_df
set.seed(7)
trainIndex_b<-createDataPartition(backup_df$log_MSRP,p=.8,list=F)  #p: proportion of data in train
training_b <- backup_df[trainIndex,]
validate_b <- backup_df[-trainIndex,]
# test/train/validation split for objective 2
set.seed(7)
train_df <- .8
valid_df <- .1
test_df <- .1
sampleSizeTrain <- floor(train_df * nrow(backup_df))
sampleSizeValid <- floor(valid_df * nrow(backup_df))
sampleSizeTest <- floor(test_df * nrow(backup_df))
index_train<- sort(sample(seq_len(nrow(backup_df)), size = sampleSizeTrain))
index_not_train<-setdiff(seq_len(nrow(backup_df)),index_train)
index_valid <- sort(sample(seq_len(nrow(backup_df)),size = sampleSizeValid))
index_test <- sort(sample(seq_len(nrow(backup_df)),size=sampleSizeTest))
car_train <- backup_df[index_train,]
car_valid <- backup_df[index_valid,]
car_test <- backup_df[index_test,]
training_slr <- training[,-11]
validate_slr <- validate[,-11]
# linear regression model
car_model_fit <- lm(log_MSRP~Year+log(Engine.HP)+Popularity,training_slr)
# variance inflation factor
vif(car_model_fit)
# coefficients
summary(car_model_fit)
# confidence intervals for coef.
confint.lm(car_model_fit)
# diagnostics
plot(car_model_fit)
# diagnostic check with resid. histogram.
ols_plot_diagnostics(car_model_fit)
# prediction on validation data
car_model_prediction <- predict(car_model_fit, interval = "predict", newdata = validate_slr)
pred_RMSE <- sqrt(mean((car_model_prediction[,1] = validate_slr$log_MSRP)^2))
pred_RMSE
# # functions for returning RMSE and ASE
# RMSE_func<- function(error){sqrt(mean(error^2))}
# ASE_func <- function(error){mean(error^2)}
#
# RMSE_func(car_model_fit$residuals)
# ASE_func(car_model_fit$residuals)
set.seed(7)
training_glm <- training[,-11]
validate_glm <-validate[,-11]
lambda <- seq(0,.37, by = .01)
fitControl2 <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
glmnet.fit2 <- train(log_MSRP~.,
data = training_glm,
method = "glmnet",
trControl = fitControl2,
tuneGrid = expand.grid(alpha = 1, lambda = lambda))
glmnet.fit2
plot(glmnet.fit2)
opt.pen2<- glmnet.fit2$finalModel$lambdaOpt
coef(glmnet.fit2$finalModel,opt.pen2)
# summary(lm(log(MSRP)~., training))
# remove features not selected by LASSO
glm_df <- training_glm[,!names(training_glm) %in% c("Engine.Cylinders12","Engine.Cylinders16","Style_Sedan1",
"nat_fuel_intake","electric_intake","french_build",
"Netherlands_build", "Engine.HP")]
# create glm model
glm_model <- lm(log_MSRP~., glm_df)
# view diagnostics
plot(glm_model)
#summary(glm_model)
cooksD <- cooks.distance(glm_model)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
names_of_influential <- names(influential)
outliers <- glm_df[names_of_influential,]
glm_without_outliers <- glm_df %>% anti_join(outliers)
glm_model_2 <- lm(log_MSRP~., glm_without_outliers)
plot(glm_model_2)
ols_plot_diagnostics(glm_model_2)
summary(glm_model_2)
glm_prediction <- predict(glm_model, interval = "predict", newdata = validate_glm)
pred_RMSE <- sqrt(mean((glm_prediction[,1] = validate_glm$log_MSRP)^2))
pred_RMSE
glm_prediction <- predict(glm_model_2, interval = "predict", newdata = validate_glm)
glm_prediction <- predict(glm_model, interval = "predict", newdata = validate_glm)
pred_RMSE <- sqrt(mean((glm_prediction[,1] = validate_glm$log_MSRP)^2))
pred_RMSE
pred_RMSE <- sqrt(mean((car_model_prediction[,1] - validate_slr$log_MSRP)^2))
pred_RMSE
training_slr <- training[,-11]
validate_slr <- validate[,-11]
# linear regression model
car_model_fit <- lm(log_MSRP~Year+log(Engine.HP)+Popularity,training_slr)
# variance inflation factor
vif(car_model_fit)
# coefficients
summary(car_model_fit)
# confidence intervals for coef.
confint.lm(car_model_fit)
# diagnostics
plot(car_model_fit)
# diagnostic check with resid. histogram.
ols_plot_diagnostics(car_model_fit)
# prediction on validation data
car_model_prediction <- predict(car_model_fit, interval = "predict", newdata = validate_slr)
pred_RMSE <- sqrt(mean((car_model_prediction[,1] - validate_slr$log_MSRP)^2))
pred_RMSE
# # functions for returning RMSE and ASE
# RMSE_func<- function(error){sqrt(mean(error^2))}
# ASE_func <- function(error){mean(error^2)}
#
# RMSE_func(car_model_fit$residuals)
# ASE_func(car_model_fit$residuals)
pred_RMSE
set.seed(7)
training_glm <- training[,-11]
validate_glm <-validate[,-11]
lambda <- seq(0,.37, by = .01)
fitControl2 <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
glmnet.fit2 <- train(log_MSRP~.,
data = training_glm,
method = "glmnet",
trControl = fitControl2,
tuneGrid = expand.grid(alpha = 1, lambda = lambda))
glmnet.fit2
plot(glmnet.fit2)
opt.pen2<- glmnet.fit2$finalModel$lambdaOpt
coef(glmnet.fit2$finalModel,opt.pen2)
# summary(lm(log(MSRP)~., training))
# remove features not selected by LASSO
glm_df <- training_glm[,!names(training_glm) %in% c("Engine.Cylinders12","Engine.Cylinders16","Style_Sedan1",
"nat_fuel_intake","electric_intake","french_build",
"Netherlands_build", "Engine.HP")]
# create glm model
glm_model <- lm(log_MSRP~., glm_df)
# view diagnostics
plot(glm_model)
#summary(glm_model)
cooksD <- cooks.distance(glm_model)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
names_of_influential <- names(influential)
outliers <- glm_df[names_of_influential,]
glm_without_outliers <- glm_df %>% anti_join(outliers)
glm_model_2 <- lm(log_MSRP~., glm_without_outliers)
plot(glm_model_2)
ols_plot_diagnostics(glm_model_2)
summary(glm_model_2)
glm_prediction <- predict(glm_model, interval = "predict", newdata = validate_glm)
pred_RMSE <- sqrt(mean((glm_prediction[,1] = validate_glm$log_MSRP)^2))
pred_RMSE
pred_RMSE <- sqrt(mean((glm_prediction[,1] - validate_glm$log_MSRP)^2))
pred_RMSE
# remove features not selected by LASSO
glm_df <- training_glm[,!names(training_glm) %in% c("Engine.Cylinders12","Engine.Cylinders16","Style_Sedan1",
"nat_fuel_intake","electric_intake","french_build",
"Netherlands_build", "Engine.HP")]
# create glm model
glm_model <- lm(log_MSRP~., glm_df)
# view diagnostics
plot(glm_model)
#summary(glm_model)
cooksD <- cooks.distance(glm_model)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
names_of_influential <- names(influential)
outliers <- glm_df[names_of_influential,]
glm_without_outliers <- glm_df %>% anti_join(outliers)
glm_model_2 <- lm(log_MSRP~., glm_without_outliers)
plot(glm_model_2)
ols_plot_diagnostics(glm_model_2)
summary(glm_model_2)
glm_prediction <- predict(glm_model, interval = "predict", newdata = validate_glm)
pred_RMSE <- sqrt(mean((glm_prediction[,1] - validate_glm$log_MSRP)^2))
pred_RMSE
pred_RMSE
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b) # note not using training
summary(complex_fit)
plot(complex_fit)
ols_plot_diagnostics(complex_fit)
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP + sqrt(Popularity),training_b) # note not using training
plot(complex_fit)
com_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b)
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP + sqrt(Popularity),training_b) # note not using training
com_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b)
summary(complex_fit)
plot(complex_fit)
plot(com_fit)
ols_plot_diagnostics(complex_fit)
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP + Year*sqrt(Popularity),training_b) # note not using training
com_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b)
plot(complex_fit)
plot(complex_fit)
plot(com_fit)
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP + sqrt(Popularity),training_b) # note not using training
com_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b)
summary(complex_fit)
plot(complex_fit)
plot(com_fit)
ols_plot_diagnostics(complex_fit)
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP + Popularity^2,training_b) # note not using training
com_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b)
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP + Popularity^2,training_b) # note not using training
com_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b)
summary(complex_fit)
plot(complex_fit)
plot(com_fit)
ols_plot_diagnostics(complex_fit)
training_b %>% ggplot(aes(Engine.HP^2))+
geom_histogram()
training_b %>% ggplot(aes(Engine.HP))+
geom_histogram()
training_b %>% ggplot(aes(Engine.HP^))+
training_b %>% ggplot(aes(Engine.HP^3))+
geom_histogram()
training_b %>% ggplot(aes(Engine.HP))+
geom_histogram()
training_b %>% ggplot(aes(log(Engine.HP)))+
geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + Engine.HP^2 + Year*Engine.HP,training_b) # note not using training
training_b %>% ggplot(aes(log(Engine.HP)))+
geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + Engine.HP^2 + Year*Engine.HP,training_b) # note not using training
summary(complex_fit)
plot(complex_fit)
plot(com_fit)
ols_plot_diagnostics(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + Engine.HP^2 + Year*Engine.HP,training_b) # note not using training
summary(complex_fit)
plot(complex_fit)
ols_plot_diagnostics(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(sqrt(MSRP)~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b) # note not using training
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(sqrt(MSRP)~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b) # note not using training
summary(complex_fit)
plot(complex_fit)
ols_plot_diagnostics(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(MSRP^2~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b) # note not using training
summary(complex_fit)
plot(complex_fit)
ols_plot_diagnostics(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year^2*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b) # note not using training
summary(complex_fit)
plot(complex_fit)
ols_plot_diagnostics(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP) + Year*Engine.HP,training_b) # note not using training
summary(complex_fit)
plot(complex_fit)
ols_plot_diagnostics(complex_fit)
glimpse(training_b)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP)*MAKE training_b) # note not using training
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP)*MAKE, training_b) # note not using training
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP)*Make, training_b) # note not using training
summary(complex_fit)
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP)*Make, log(Engine.HP)*Vehicle.Size, training_b) # note not using training
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP)*Make, log(Engine.HP)*Vehicle.Size, training_b) # note not using training
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~Year*Engine.Fuel.Type + log(Engine.HP)*Make+ log(Engine.HP)*Vehicle.Size, training_b) # note not using training
summary(complex_fit)
summary(complex_fit)
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type +
log(Engine.HP)*Make +
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Make*Engine.Cylinders+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
summary(complex_fit)
summary(complex_fit)
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Make*Engine.HP+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Make*Year+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
glimpse(training_b)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
log(Engine.HP)*Market.Category+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Year*Vehicle.Size+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Year*Vehicle.Style+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Year*Engine.Cylinders+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Year*Market.Category+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Market.Category+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Year*Transmission.Type+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
# training_b %>% ggplot(aes(log(Engine.HP)))+
#   geom_histogram()
# add srt_p
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Year*Driven_Wheels+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
plot(complex_fit)
summary(complex_fit)
ols_plot_diagnostics(complex_fit)
complex_pred <- predict(complex_fit, interval = "predict", newdata = validate_b)
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Year*Driven_Wheels+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
complex_pred <- predict(complex_fit, interval = "predict", newdata = validate_b)
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Year*Driven_Wheels+
log(Engine.HP)*Vehicle.Size,
training_slr) # note not using training
complex_fit <- lm(log_MSRP~
Year*Engine.Fuel.Type+
Year*Driven_Wheels+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
complex_pred <- predict(complex_fit, interval = "predict", newdata = validate_b)
complex_fit <- lm(log_MSRP~
Year+
Year*Driven_Wheels+
log(Engine.HP)*Vehicle.Size,
training_b) # note not using training
complex_pred <- predict(complex_fit, interval = "predict", newdata = validate_b)
complex_RMSE<- sqrt(mean((complex_pred[,1] - validate_b$log_MSRP)^2))
complex_RMSE
#
# RMSE_func(car_model_fit$residuals)
ase <- ASE_func(car_model_fit$residuals)
cat("RMSE: ", pred_RMSE, "ASE: ", ase)
