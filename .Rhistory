#                                          "Market.CategoryCrossover,Exotic,Luxury,High-Performance",
#                                          "Market.CategoryCrossover,Exotic,Luxury,Performance",
#                                          "Market.CategoryExotic,Factory Tuner,High-Performance",
#                                          "Market.CategoryExotic,Factory Tuner,Luxury,High-Performance",
#                                          "Market.CategoryExotic,Factory Tuner,Luxury,Performance",
#                                          "Market.CategoryExotic,Flex Fuel,Factory Tuner,Luxury,High-Performance",
#                                          "Market.CategoryExotic,Flex Fuel,Luxury,High-Performance",
#                                          "Market.CategoryExotic,Luxury", "Market.CategoryExotic,Luxury,High-Performance,Hybrid",
#                                          "Market.CategoryExotic,Luxury,Performance","Market.CategoryFactory Tuner,Luxury",
#                                          "Market.CategoryFlex Fuel,Factory Tuner,Luxury,High-Performance", "Vehicle.StyleCrew Cab Pickup")]
# glimpse(car_df)
# complex_fit <- lm(log(MSRP)~log(as.integer(Year))*log(city.mpg) +log(Engine.HP) ,car_df)
# summary(complex_fit)
# plot(complex_fit)
set.seed(7)
fitControl2 <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
glmnet.fit2 <- train(log_MSRP~.,
data = training,
method = "glmnet",
trControl = fitControl2)
glmnet.fit2
plot(glmnet.fit2)
opt.pen2<- glmnet.fit2$finalModel$lambdaOpt
coef(glmnet.fit2$finalModel,opt.pen2)
# summary(lm(log(MSRP)~., training))
glm_df <- training[,!names(training) %in% c("MakeAston Martin", "MakeBentley","MakeBugatti",
"MakeFerrari","MakeFord","MakeLamborghini",
"MakeMaybach","MakeMcLaren","MakePlymouth",
"MakeRolls-Royce","MakeSpyker","MakeTesla","Engine.Fuel.Typeelectric",
"Engine.Cylinders4","Engine.Cylinders12","Market.CategoryCrossover,Exotic.Luxury.Performance",
"Market.CategoryExotic,Factory Tuner,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,Performance",
"Market.CategoryExotic,Flex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Flex Fuel,Luxury,High-Performance",
"Market.CategoryExotic,Luxury","Market.CategoryExotic,Luxury,High-Performance,Hybrid",
"Market.CategoryExotic,Luxury,Performance", "Market.CategoryExotic,Performance",
"Market.CategoryFactory Tuner,Luxury",
"Market.CategoryFlex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryPerformance,Hybrid")]
glm_model <- lm(log(MSRP)~., glm_df)
plot(glm_model)
view(glm_df)
glm_df <- training[,!names(training) %in% c("MakeAston Martin", "MakeBentley","MakeBugatti",
"MakeFerrari","MakeFord","MakeLamborghini",
"MakeMaybach","MakeMcLaren","MakePlymouth",
"MakeRolls-Royce","MakeSpyker","MakeTesla","Engine.Fuel.Typeelectric",
"Engine.Cylinders4","Engine.Cylinders12","Market.CategoryCrossover,Exotic.Luxury.Performance",
"Market.CategoryExotic,Factory Tuner,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,Performance",
"Market.CategoryExotic,Flex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Flex Fuel,Luxury,High-Performance",
"Market.CategoryExotic,Luxury","Market.CategoryExotic,Luxury,High-Performance,Hybrid",
"Market.CategoryExotic,Luxury,Performance", "Market.CategoryExotic,Performance",
"Market.CategoryFactory Tuner,Luxury",
"Market.CategoryFlex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryPerformance,Hybrid")]
glm_df <- glm_df[-165,]
glm_model <- lm(log(MSRP)~., glm_df)
plot(glm_model)
view(glm_df)
glm_df <- glm_df[-165,]
glm_model <- lm(log(MSRP)~., glm_df)
plot(glm_model)
glm_df <- glm_df[-165,]
glm_model <- lm(log(MSRP)~., glm_df)
plot(glm_model)
glm_df <- glm_df[-165,]
glm_model <- lm(log(MSRP)~., glm_df)
plot(glm_model)
library(tidyverse)
library(naniar)
library(caret)
library(ggcorrplot)
library(FNN)
library(car)
library(ggplot2)
library(rgl)
dataset <- read.csv("C:/Users/Joey/Desktop/applied-stats/datasets/data1.csv")
#glimpse(dataset) # looking at the var types of each
summary(dataset) # visually looking at the sum. stats of the vars in the data.
vis_miss(dataset) # viz looking @ missing values
#updating NA for Doors
dataset[6931:6935,9] <- 4 # Tesla model S
dataset[4667,9] <- 2 # Ferrari FF
dataset[1984:1985, 6] <- 0 # chevy bolt EV
dataset[3717:3720, 6] <- 0 # volkswagen e-golf
dataset[5779:5781,6] <- 0 # mitsubishi i-miev
dataset[8374,6] <- 0 # toyota rav4-ev
dataset[8696:8715, 6] <- 0 # mazda rotary engine RX7 AND RX8
dataset[8374,5] <- 154 # toyota RAV4-EV
dataset[2906:2909,5] <- 305 # lincoln Continental
dataset[4204:4207,5]<- 168 # ford escape
dataset[4915:4920,5]<- 193 # ford freestar
dataset[c(5826,5831,5832,5834,5840,5841),5]<- 305 # chevy impala flex-fuel
dataset[c(6909,6911,6917,6919),5]<-240 # lincoln mkz
dataset[6579, 5] <- 200 # mercedes-benz m-class
dataset[8375:8376,5]<-154 # 2013 rav4 EV and 2014
dataset[540:542, 5] <- 111 # fiat 500 e - from edmunds
dataset[9851:9855,5]<- 109 # kia soul Ev
dataset[4706:4707,5] <- 123 # honda fit Ev
dataset[c(4786,4790,4799),5] <- 143 # ford focus ev
dataset[5779,5] <- 66 # mitsubishi i-miev
dataset[6386:6395,5] <- 107 # nissan leaf
dataset[6923,5] <- 302 # base tsla model s 2014
dataset[6922,5] <- 302 # 2nd tsla model s 2014
dataset[6925,5] <- 362 # 3rd tsla model s 2014
dataset[6924,5] <- 416 # 4th tsla model s 2014
dataset[6926:6927,5]<- 329 # tsla model s 2015
dataset[6930, 5]<- 362 # tsla model s 2015
dataset[6928,5]<- 416 # tsla model s 2015
dataset[6929,5]<- 691 # tsla model s 2015
dataset[6932,5]<-259 # tsla model s 2016
dataset[6935,5]<-315
dataset[6934:6936,5] <- 373 # tsla model s 2016
dataset[6936,5]<-373# tsla model s 2016
dataset[c(6931,6937),5]<-417# tsla model s 2016
dataset[6939,5]<- 503# tsla model s 2016
dataset[c(6933,6938),5] <- 691# tsla model s 2016
dataset[11322:11324,4] <- 'regular unleaded' # suzuki verona missing fuel type
car_data <- dataset
car_data[1290:1291, 7] <- "AUTOMATIC" # oldsmobile achieva
car_data[4692,7]<- "MANUAL" # cheaper firebird
car_data[4693:4694,7]<- "AUTOMATIC" #more expensive firebird
car_data[6159,7] <- "MANUAL" # GMC Jimmy cheaper 99
car_data[6161,7] <- "AUTOMATIC" # GMC jimmy 99
car_data[6166,7] <- "MANUAL" #gmc jimmy 00
car_data[6175,7]<- "AUTOMATIC" # gmc jimmy 00
car_data[6367,7] <- "MANUAL" # chrysler le baron
car_data[6369,7] <- "AUTOMATIC"# chrysler le baron
car_data[c(8043,8044,8047,8048,8049,8050,8052,8054),7] <- "AUTOMATIC" # dodge ram 150
car_data$Make <- as.factor(car_data$Make)
car_data$Engine.Fuel.Type<- as.factor(car_data$Engine.Fuel.Type) # chr
car_data$Engine.HP<- as.numeric(car_data$Engine.HP) # dbl
car_data$Engine.Cylinders<-as.factor(car_data$Engine.Cylinders) # dbl
car_data$Transmission.Type<-as.factor(car_data$Transmission.Type) # chr
car_data$Driven_Wheels<- as.factor(car_data$Driven_Wheels) # chr
car_data$Number.of.Doors<- as.integer(car_data$Number.of.Doors) # dbl
car_data$Vehicle.Size<-as.factor(car_data$Vehicle.Size) # chr
car_data$Vehicle.Style<-as.factor(car_data$Vehicle.Style) # chr
car_data$Market.Category<-as.factor(car_data$Market.Category) # chr
# change so that we can handle the "N/A" which is NOT an NA
car_data$Market.Category<-as.character(car_data$Market.Category)
sum(car_data$Market.Category == "N/A") #3742 this is our benchmark
# reading as not applicable we will change to no category
car_data$Market.Category[car_data$Market.Category == "N/A"] <- "No Category"
# sanity check should be 0
sum(car_data$Market.Category == "N/A")
# change to match rest of data type (factor)
car_data$Market.Category<-as.factor(car_data$Market.Category)
car_data[1120,13] <- 34
#glimpse(car_data) # view the df
car_data <- car_data[,-2] # rm the model column
#glimpse(car_data) # sanity check the df
car_df <- car_data
# keeping data from > than year 2000
car_df <- car_data %>% filter(Year > 2000)
car_df <- car_df %>% filter(MSRP <=90000)
# filter out electric models
car_df <- car_df%>% filter(Engine.Fuel.Type != "electric")
# adjust var types so that they work with our functions below.
car_df$log_MSRP <- log(car_df$MSRP)
car_df$Year <- as.double(car_df$Year)
car_df$city.mpg<-as.double(car_df$city.mpg)
car_df$highway.MPG<-as.double(car_df$highway.MPG)
car_df$Engine.Cylinders<-as.factor(car_df$Engine.Cylinders)
car_df$Engine.HP<-as.double(car_df$Engine.HP)
levels(car_df$Make)
# removing no-numerical categories
car_data_correlations <- car_df[,-c(1, 3,5,6,7,9,10,11)]
corr_data <- cor(car_data_correlations)
ggcorrplot(corr_data, outline.color = "black", lab = TRUE)
set.seed(7)
trainIndex<-createDataPartition(car_df$log_MSRP,p=.8,list=F)  #p: proportion of data in train
training <- car_df[trainIndex,]
validate <- car_df[-trainIndex,]
car_model_fit <- lm(log(MSRP)~log(Year)+log(Engine.HP), training)
# variance inflation factor
vif(car_model_fit)
# coef.
summary(car_model_fit)
# diagnostics
plot(car_model_fit)
car_model_fit2 <- lm(log(MSRP)~log(Year)+log(Engine.HP),car_df)
summary(car_model_fit2)
plot(car_model_fit2)
plot(car_df$MSRP)
#
# set.seed(7)
#
# fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
# glmnet.fit <- train(log(MSRP)~.,
#                     data = car_df,
#                     method = "glmnet",
#                     trControl = fitControl)
#
#
# glmnet.fit
#
# plot(glmnet.fit)
# opt.pen<- glmnet.fit$finalModel$lambdaOpt
# coef(glmnet.fit$finalModel,opt.pen)
#
# summary(lm(log(MSRP)~., car_df))
# code to remove the features that glmnet didn't select
# car_glm <- car_df[,!names(car_df) %in% c("MakeAston Martin","MakeBentley", "MakeBugatti", "MakeFerrari", "MakeGMC",
#                                          "MakeLamborghini","MakeMaybach", "MakeMcLaren", "MakeRolls-Royce",
#                                          "MakeSpyker", "MakeTesla", "Engine.Cylinders6", "Engine.Cylinders16",
#                                          "Market.CategoryCrossover,Exotic,Luxury,High-Performance",
#                                          "Market.CategoryCrossover,Exotic,Luxury,Performance",
#                                          "Market.CategoryExotic,Factory Tuner,High-Performance",
#                                          "Market.CategoryExotic,Factory Tuner,Luxury,High-Performance",
#                                          "Market.CategoryExotic,Factory Tuner,Luxury,Performance",
#                                          "Market.CategoryExotic,Flex Fuel,Factory Tuner,Luxury,High-Performance",
#                                          "Market.CategoryExotic,Flex Fuel,Luxury,High-Performance",
#                                          "Market.CategoryExotic,Luxury", "Market.CategoryExotic,Luxury,High-Performance,Hybrid",
#                                          "Market.CategoryExotic,Luxury,Performance","Market.CategoryFactory Tuner,Luxury",
#                                          "Market.CategoryFlex Fuel,Factory Tuner,Luxury,High-Performance", "Vehicle.StyleCrew Cab Pickup")]
# glimpse(car_df)
# complex_fit <- lm(log(MSRP)~log(as.integer(Year))*log(city.mpg) +log(Engine.HP) ,car_df)
# summary(complex_fit)
# plot(complex_fit)
set.seed(7)
fitControl2 <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
glmnet.fit2 <- train(log_MSRP~.,
data = training,
method = "glmnet",
trControl = fitControl2)
glmnet.fit2
plot(glmnet.fit2)
opt.pen2<- glmnet.fit2$finalModel$lambdaOpt
coef(glmnet.fit2$finalModel,opt.pen2)
# summary(lm(log(MSRP)~., training))
glm_df <- training[,!names(training) %in% c("MakeAston Martin", "MakeBentley","MakeBugatti",
"MakeFerrari","MakeFord","MakeLamborghini",
"MakeMaybach","MakeMcLaren","MakePlymouth",
"MakeRolls-Royce","MakeSpyker","MakeTesla","Engine.Fuel.Typeelectric",
"Engine.Cylinders4","Engine.Cylinders12","Market.CategoryCrossover,Exotic.Luxury.Performance",
"Market.CategoryExotic,Factory Tuner,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,Performance",
"Market.CategoryExotic,Flex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Flex Fuel,Luxury,High-Performance",
"Market.CategoryExotic,Luxury","Market.CategoryExotic,Luxury,High-Performance,Hybrid",
"Market.CategoryExotic,Luxury,Performance", "Market.CategoryExotic,Performance",
"Market.CategoryFactory Tuner,Luxury",
"Market.CategoryFlex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryPerformance,Hybrid")]
glm_model <- lm(log(MSRP)~., glm_df)
plot(glm_model)
view(glm_df)
summary(glm_model)
summary(glm_df)
glm_df$log_engine_hp <- as.double(glm_df$Engine.HP)
glm_model <- lm(log(MSRP)~., glm_df)
plot(glm_model)
car_model_fit2 <- lm(log(MSRP)~Year+log(Engine.HP),car_df)
summary(car_model_fit2)
plot(car_model_fit2)
plot(car_df$MSRP)
cooksD <- cooks.distance(glm_model)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
plot(glm_model)
influential
view(glm_df)
names_of_influential <- names(influential)
outliers <- glm_df[names_of_influential,]
glm_without_outliers <- glm_df %>% anti_join(outliers)
model_glm2 <- lm(log(MSRP)~., glm_without_outliers)
plot(model_glm2)
glm_df <- training[,!names(training) %in% c("MakeAston Martin", "MakeBentley","MakeBugatti",
"MakeFerrari","MakeFord","MakeLamborghini",
"MakeMaybach","MakeMcLaren","MakePlymouth",
"MakeRolls-Royce","MakeSpyker","MakeTesla","Engine.Fuel.Typeelectric",
"Engine.Cylinders4","Engine.Cylinders12","Market.CategoryCrossover,Exotic.Luxury.Performance",
"Market.CategoryExotic,Factory Tuner,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,Performance",
"Market.CategoryExotic,Flex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Flex Fuel,Luxury,High-Performance",
"Market.CategoryExotic,Luxury","Market.CategoryExotic,Luxury,High-Performance,Hybrid",
"Market.CategoryExotic,Luxury,Performance", "Market.CategoryExotic,Performance",
"Market.CategoryFactory Tuner,Luxury",
"Market.CategoryFlex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryPerformance,Hybrid")]
summary(glm_df)
glm_model <- lm(log(MSRP)~., glm_df)
plot(glm_model)
summary(glm_model)
cooksD <- cooks.distance(glm_model)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
names_of_influential <- names(influential)
outliers <- glm_df[names_of_influential,]
glm_without_outliers <- glm_df %>% anti_join(outliers)
model_glm2 <- lm(log(MSRP)~., glm_without_outliers)
plot(model_glm2)
influential2 <- cooksD[(cook2 >(3 * mean(cook2, na.rm = TRUE)))]
cook2 <- cooks.distance(glm_without_outliers)
glm_without_outliers <- glm_df %>% anti_join(outliers)
model_glm2 <- lm(log(MSRP)~., glm_without_outliers)
cook2 <- cooks.distance(glm_without_outliers)
cook2 <- cooks.distance(as.dataframe(glm_without_outliers))
library(tidyverse)
library(naniar)
library(caret)
library(ggcorrplot)
library(FNN)
library(car)
library(ggplot2)
library(rgl)
dataset <- read.csv("C:/Users/Joey/Desktop/applied-stats/datasets/data1.csv")
#glimpse(dataset) # looking at the var types of each
summary(dataset) # visually looking at the sum. stats of the vars in the data.
vis_miss(dataset) # viz looking @ missing values
#updating NA for Doors
dataset[6931:6935,9] <- 4 # Tesla model S
dataset[4667,9] <- 2 # Ferrari FF
dataset[1984:1985, 6] <- 0 # chevy bolt EV
dataset[3717:3720, 6] <- 0 # volkswagen e-golf
dataset[5779:5781,6] <- 0 # mitsubishi i-miev
dataset[8374,6] <- 0 # toyota rav4-ev
dataset[8696:8715, 6] <- 0 # mazda rotary engine RX7 AND RX8
dataset[8374,5] <- 154 # toyota RAV4-EV
dataset[2906:2909,5] <- 305 # lincoln Continental
dataset[4204:4207,5]<- 168 # ford escape
dataset[4915:4920,5]<- 193 # ford freestar
dataset[c(5826,5831,5832,5834,5840,5841),5]<- 305 # chevy impala flex-fuel
dataset[c(6909,6911,6917,6919),5]<-240 # lincoln mkz
dataset[6579, 5] <- 200 # mercedes-benz m-class
dataset[8375:8376,5]<-154 # 2013 rav4 EV and 2014
dataset[540:542, 5] <- 111 # fiat 500 e - from edmunds
dataset[9851:9855,5]<- 109 # kia soul Ev
dataset[4706:4707,5] <- 123 # honda fit Ev
dataset[c(4786,4790,4799),5] <- 143 # ford focus ev
dataset[5779,5] <- 66 # mitsubishi i-miev
dataset[6386:6395,5] <- 107 # nissan leaf
dataset[6923,5] <- 302 # base tsla model s 2014
dataset[6922,5] <- 302 # 2nd tsla model s 2014
dataset[6925,5] <- 362 # 3rd tsla model s 2014
dataset[6924,5] <- 416 # 4th tsla model s 2014
dataset[6926:6927,5]<- 329 # tsla model s 2015
dataset[6930, 5]<- 362 # tsla model s 2015
dataset[6928,5]<- 416 # tsla model s 2015
dataset[6929,5]<- 691 # tsla model s 2015
dataset[6932,5]<-259 # tsla model s 2016
dataset[6935,5]<-315
dataset[6934:6936,5] <- 373 # tsla model s 2016
dataset[6936,5]<-373# tsla model s 2016
dataset[c(6931,6937),5]<-417# tsla model s 2016
dataset[6939,5]<- 503# tsla model s 2016
dataset[c(6933,6938),5] <- 691# tsla model s 2016
dataset[11322:11324,4] <- 'regular unleaded' # suzuki verona missing fuel type
car_data <- dataset
car_data[1290:1291, 7] <- "AUTOMATIC" # oldsmobile achieva
car_data[4692,7]<- "MANUAL" # cheaper firebird
car_data[4693:4694,7]<- "AUTOMATIC" #more expensive firebird
car_data[6159,7] <- "MANUAL" # GMC Jimmy cheaper 99
car_data[6161,7] <- "AUTOMATIC" # GMC jimmy 99
car_data[6166,7] <- "MANUAL" #gmc jimmy 00
car_data[6175,7]<- "AUTOMATIC" # gmc jimmy 00
car_data[6367,7] <- "MANUAL" # chrysler le baron
car_data[6369,7] <- "AUTOMATIC"# chrysler le baron
car_data[c(8043,8044,8047,8048,8049,8050,8052,8054),7] <- "AUTOMATIC" # dodge ram 150
car_data$Make <- as.factor(car_data$Make)
car_data$Engine.Fuel.Type<- as.factor(car_data$Engine.Fuel.Type) # chr
car_data$Engine.HP<- as.numeric(car_data$Engine.HP) # dbl
car_data$Engine.Cylinders<-as.factor(car_data$Engine.Cylinders) # dbl
car_data$Transmission.Type<-as.factor(car_data$Transmission.Type) # chr
car_data$Driven_Wheels<- as.factor(car_data$Driven_Wheels) # chr
car_data$Number.of.Doors<- as.integer(car_data$Number.of.Doors) # dbl
car_data$Vehicle.Size<-as.factor(car_data$Vehicle.Size) # chr
car_data$Vehicle.Style<-as.factor(car_data$Vehicle.Style) # chr
car_data$Market.Category<-as.factor(car_data$Market.Category) # chr
# change so that we can handle the "N/A" which is NOT an NA
car_data$Market.Category<-as.character(car_data$Market.Category)
sum(car_data$Market.Category == "N/A") #3742 this is our benchmark
# reading as not applicable we will change to no category
car_data$Market.Category[car_data$Market.Category == "N/A"] <- "No Category"
# sanity check should be 0
sum(car_data$Market.Category == "N/A")
# change to match rest of data type (factor)
car_data$Market.Category<-as.factor(car_data$Market.Category)
car_data[1120,13] <- 34
#glimpse(car_data) # view the df
car_data <- car_data[,-2] # rm the model column
#glimpse(car_data) # sanity check the df
car_df <- car_data
# keeping data from > than year 2000
car_df <- car_data %>% filter(Year > 2000)
car_df <- car_df %>% filter(MSRP <=90000)
# filter out electric models
car_df <- car_df%>% filter(Engine.Fuel.Type != "electric")
# adjust var types so that they work with our functions below.
car_df$log_MSRP <- log(car_df$MSRP)
car_df$Year <- as.double(car_df$Year)
car_df$city.mpg<-as.double(car_df$city.mpg)
car_df$highway.MPG<-as.double(car_df$highway.MPG)
car_df$Engine.Cylinders<-as.factor(car_df$Engine.Cylinders)
car_df$Engine.HP<-as.double(car_df$Engine.HP)
levels(car_df$Make)
# removing no-numerical categories
car_data_correlations <- car_df[,-c(1, 3,5,6,7,9,10,11)]
corr_data <- cor(car_data_correlations)
ggcorrplot(corr_data, outline.color = "black", lab = TRUE)
set.seed(7)
trainIndex<-createDataPartition(car_df$log_MSRP,p=.8,list=F)  #p: proportion of data in train
training <- car_df[trainIndex,]
validate <- car_df[-trainIndex,]
car_model_fit <- lm(log(MSRP)~log(Year)+log(Engine.HP), training)
# variance inflation factor
vif(car_model_fit)
# coef.
summary(car_model_fit)
# diagnostics
plot(car_model_fit)
car_model_fit2 <- lm(log(MSRP)~Year+log(Engine.HP),car_df)
summary(car_model_fit2)
plot(car_model_fit2)
plot(car_df$MSRP)
#
# set.seed(7)
#
# fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
# glmnet.fit <- train(log(MSRP)~.,
#                     data = car_df,
#                     method = "glmnet",
#                     trControl = fitControl)
#
#
# glmnet.fit
#
# plot(glmnet.fit)
# opt.pen<- glmnet.fit$finalModel$lambdaOpt
# coef(glmnet.fit$finalModel,opt.pen)
#
# summary(lm(log(MSRP)~., car_df))
# code to remove the features that glmnet didn't select
# car_glm <- car_df[,!names(car_df) %in% c("MakeAston Martin","MakeBentley", "MakeBugatti", "MakeFerrari", "MakeGMC",
#                                          "MakeLamborghini","MakeMaybach", "MakeMcLaren", "MakeRolls-Royce",
#                                          "MakeSpyker", "MakeTesla", "Engine.Cylinders6", "Engine.Cylinders16",
#                                          "Market.CategoryCrossover,Exotic,Luxury,High-Performance",
#                                          "Market.CategoryCrossover,Exotic,Luxury,Performance",
#                                          "Market.CategoryExotic,Factory Tuner,High-Performance",
#                                          "Market.CategoryExotic,Factory Tuner,Luxury,High-Performance",
#                                          "Market.CategoryExotic,Factory Tuner,Luxury,Performance",
#                                          "Market.CategoryExotic,Flex Fuel,Factory Tuner,Luxury,High-Performance",
#                                          "Market.CategoryExotic,Flex Fuel,Luxury,High-Performance",
#                                          "Market.CategoryExotic,Luxury", "Market.CategoryExotic,Luxury,High-Performance,Hybrid",
#                                          "Market.CategoryExotic,Luxury,Performance","Market.CategoryFactory Tuner,Luxury",
#                                          "Market.CategoryFlex Fuel,Factory Tuner,Luxury,High-Performance", "Vehicle.StyleCrew Cab Pickup")]
# glimpse(car_df)
# complex_fit <- lm(log(MSRP)~log(as.integer(Year))*log(city.mpg) +log(Engine.HP) ,car_df)
# summary(complex_fit)
# plot(complex_fit)
set.seed(7)
fitControl2 <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
glmnet.fit2 <- train(log_MSRP~.,
data = training,
method = "glmnet",
trControl = fitControl2)
glmnet.fit2
plot(glmnet.fit2)
opt.pen2<- glmnet.fit2$finalModel$lambdaOpt
coef(glmnet.fit2$finalModel,opt.pen2)
# summary(lm(log(MSRP)~., training))
glm_df <- training[,!names(training) %in% c("MakeAston Martin", "MakeBentley","MakeBugatti",
"MakeFerrari","MakeFord","MakeLamborghini",
"MakeMaybach","MakeMcLaren","MakePlymouth",
"MakeRolls-Royce","MakeSpyker","MakeTesla","Engine.Fuel.Typeelectric",
"Engine.Cylinders4","Engine.Cylinders12","Market.CategoryCrossover,Exotic.Luxury.Performance",
"Market.CategoryExotic,Factory Tuner,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Factory Tuner,Luxury,Performance",
"Market.CategoryExotic,Flex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryExotic,Flex Fuel,Luxury,High-Performance",
"Market.CategoryExotic,Luxury","Market.CategoryExotic,Luxury,High-Performance,Hybrid",
"Market.CategoryExotic,Luxury,Performance", "Market.CategoryExotic,Performance",
"Market.CategoryFactory Tuner,Luxury",
"Market.CategoryFlex Fuel,Factory Tuner,Luxury,High-Performance",
"Market.CategoryPerformance,Hybrid")]
summary(glm_df)
glm_model <- lm(log(MSRP)~., glm_df)
plot(glm_model)
summary(glm_model)
cooksD <- cooks.distance(glm_model)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
names_of_influential <- names(influential)
names_of_influential
outliers <- glm_df[-c(34, 46, 73, 133, 153, 153, 165, 4984),] # old is [names_of_influential,]
glm_without_outliers <- glm_df %>% anti_join(outliers)
model_glm2 <- lm(log(MSRP)~., glm_without_outliers)
glm_without_outliers <- glm_df %>% anti_join(outliers)
model_glm2 <- lm(log(MSRP)~., glm_without_outliers)
plot(model_glm2)
outliers <- glm_df[names_of_influential,]
glm_without_outliers <- glm_df %>% anti_join(outliers)
model_glm2 <- lm(log(MSRP)~., glm_without_outliers)
plot(model_glm2)
cooksD <- cooks.distance(model_glm2)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
names_of_influential <- names(influential)
outliers <- glm_df[names_of_influential,]
glm_without_outliers <- glm_df %>% anti_join(outliers)
model_glm2 <- lm(log(MSRP)~., glm_without_outliers)
plot(model_glm2)
summary(glm_df)
summary(glm_model)
